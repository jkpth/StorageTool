# Scan for large files
scan_large_files() {
    clear
    print_colored "$CYAN" "
 _                         _______ _           
| |                       |__   __(_)          
| |     __ _ _ __ __ _  ___  | |   _ _ __ ___  
| |    / _\` | '__/ _\` |/ _ \ | |  | | '_ \` _ \ 
| |___| (_| | | | (_| |  __/ | |  | | | | | | |
|______\__,_|_|  \__, |\___| |_|  |_|_| |_| |_|
                  __/ |                        
                 |___/                         
"
    print_colored "$GREEN" "Scanning for large files (this may take a while)..."
    echo ""
    
    # Finding largest files - using numeric sort instead of human-readable
    echo "Top 20 largest files:"
    echo ""
    
    # Using du -k to get kilobyte sizes and sort numerically
    find "$KINDLE_ROOT" -type f -size +1M 2>/dev/null | xargs du -k 2>/dev/null | sort -rn | head -20 > "$TEMP_DIR/large_files_raw.txt"
    
    # Format the output with readable sizes
    line_num=1
    while read -r size_kb filepath; do
        # Calculate size in appropriate units
        if [ "$size_kb" -gt 1048576 ]; then  # Greater than 1GB (in KB)
            size_gb=$((size_kb / 1024 / 1024))
            size_decimal=$(((size_kb % (1024*1024)) * 10 / (1024*1024)))
            size_str="${size_gb}.${size_decimal}GB"
        elif [ "$size_kb" -gt 1024 ]; then   # Greater than 1MB (in KB)
            size_mb=$((size_kb / 1024))
            size_decimal=$(((size_kb % 1024) * 10 / 1024))
            size_str="${size_mb}.${size_decimal}MB"
        else
            size_str="${size_kb}KB"
        fi
        
        # Get just the filename from the path
        filename=$(basename "$filepath")
        
        # Print formatted line
        printf "%2d. %s (%s)\n" "$line_num" "$filepath" "$size_str"
        
        line_num=$((line_num + 1))
    done < "$TEMP_DIR/large_files_raw.txt" | tee "$LARGE_FILES"
    
    echo ""
    echo "Press any key to continue..."
    read -n 1 -s
}
